{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6c7b825b-27a6-47cb-8a78-4397c9d56b9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 0.1928130958454639\n",
      "Root Mean Squared Error (RMSE): 0.439104880234169\n"
     ]
    }
   ],
   "source": [
    "# Method-1 : Cosine Similarity\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def build_similarity_model(data, relevant_columns):\n",
    "    # Remove '%' symbol and convert to float\n",
    "    data[relevant_columns] = data[relevant_columns].replace('%', '', regex=True).astype(float)\n",
    "\n",
    "    # Drop rows with NaN values\n",
    "    data.dropna(inplace=True)\n",
    "\n",
    "    # Normalize the selected columns\n",
    "    scaler = MinMaxScaler()\n",
    "    data_normalized = scaler.fit_transform(data[relevant_columns])\n",
    "\n",
    "    # Compute similarity between schools using cosine similarity\n",
    "    similarity_matrix = cosine_similarity(data_normalized)\n",
    "    return similarity_matrix\n",
    "\n",
    "def evaluate_model(similarity_matrix, true_similarity_matrix):\n",
    "    # Flatten the similarity matrices\n",
    "    similarity_values = similarity_matrix.flatten()\n",
    "    true_values = true_similarity_matrix.flatten()\n",
    "\n",
    "    # Compute Mean Squared Error (MSE)\n",
    "    mse = mean_squared_error(true_values, similarity_values)\n",
    "\n",
    "    # Compute Root Mean Squared Error (RMSE)\n",
    "    rmse = np.sqrt(mse)\n",
    "    return mse, rmse\n",
    "\n",
    "# Example usage:\n",
    "def main():\n",
    "    # Load preprocessed dataset\n",
    "    file_path = 'preprocessed_dataset.csv'\n",
    "    data = pd.read_csv(file_path)\n",
    "\n",
    "    # Define relevant columns\n",
    "    relevant_columns = ['Racial % - White', 'Racial % - Asian', 'Racial % - Hispanic', \n",
    "                        'Gender - Male', 'Gender - Female']\n",
    "\n",
    "    # Build similarity model\n",
    "    similarity_matrix = build_similarity_model(data, relevant_columns)\n",
    "\n",
    "    true_similarity_matrix = np.random.rand(*similarity_matrix.shape)  \n",
    "    mse, rmse = evaluate_model(similarity_matrix, true_similarity_matrix)\n",
    "    print(\"Mean Squared Error (MSE):\", mse)\n",
    "    print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b7943dd5-cdcc-4630-b68c-59f988ea5b48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 1087237.9030101323\n",
      "Root Mean Squared Error (RMSE): 1042.7070072700826\n"
     ]
    }
   ],
   "source": [
    "# Method-2: Euclidean Distance Model\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def euclidean_distance(x, y):\n",
    "    return np.sqrt(np.sum((x - y) ** 2))\n",
    "\n",
    "def build_similarity_model(data, relevant_columns):\n",
    "    # Remove '%' symbol and convert to float\n",
    "    data[relevant_columns] = data[relevant_columns].replace('%', '', regex=True).astype(float)\n",
    "\n",
    "    # Drop rows with NaN values\n",
    "    data.dropna(inplace=True)\n",
    "\n",
    "    # Compute Euclidean distance between all pairs of data points\n",
    "    n = len(data)\n",
    "    similarity_matrix = np.zeros((n, n))\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            similarity_matrix[i, j] = euclidean_distance(data[relevant_columns].iloc[i], data[relevant_columns].iloc[j])\n",
    "    return similarity_matrix\n",
    "\n",
    "def evaluate_model(similarity_matrix, true_similarity_matrix):\n",
    "    # Flatten the similarity matrices\n",
    "    similarity_values = similarity_matrix.flatten()\n",
    "    true_values = true_similarity_matrix.flatten()\n",
    "\n",
    "    # Compute Mean Squared Error (MSE)\n",
    "    mse = mean_squared_error(true_values, similarity_values)\n",
    "\n",
    "    # Compute Root Mean Squared Error (RMSE)\n",
    "    rmse = np.sqrt(mse)\n",
    "    return mse, rmse\n",
    "\n",
    "# Example usage:\n",
    "def main():\n",
    "    # Load preprocessed dataset\n",
    "    file_path = 'preprocessed_dataset.csv'\n",
    "    data = pd.read_csv(file_path)\n",
    "\n",
    "    # Define relevant columns\n",
    "    relevant_columns = ['Racial % - White', 'Racial % - Asian', 'Racial % - Hispanic', \n",
    "                        'Gender - Male', 'Gender - Female']\n",
    "\n",
    "    # Build similarity model\n",
    "    similarity_matrix = build_similarity_model(data, relevant_columns)\n",
    "    \n",
    "    true_similarity_matrix = np.random.rand(*similarity_matrix.shape)  # Dummy true similarity matrix\n",
    "    mse, rmse = evaluate_model(similarity_matrix, true_similarity_matrix)\n",
    "    print(\"Mean Squared Error (MSE):\", mse)\n",
    "    print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6c5d3079-5f5c-4361-b530-1c2cde833e56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 0.30383165904415865\n",
      "Root Mean Squared Error (RMSE): 0.5512092697371468\n"
     ]
    }
   ],
   "source": [
    "# Method-3: Jaccard_Similarity\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def jaccard_similarity(x, y):\n",
    "    intersection = len(set(x) & set(y))\n",
    "    union = len(set(x) | set(y))\n",
    "    return intersection / union if union != 0 else 0  # Return 0 if union is 0 to handle division by zero\n",
    "\n",
    "def build_similarity_model(data, relevant_columns):\n",
    "    # Remove '%' symbol and convert to float\n",
    "    data[relevant_columns] = data[relevant_columns].replace('%', '', regex=True).astype(float)\n",
    "\n",
    "    # Drop rows with NaN values\n",
    "    data.dropna(inplace=True)\n",
    "\n",
    "    # Compute Jaccard similarity between all pairs of data points\n",
    "    n = len(data)\n",
    "    similarity_matrix = np.zeros((n, n))\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            similarity_matrix[i, j] = jaccard_similarity(data[relevant_columns].iloc[i], data[relevant_columns].iloc[j])\n",
    "    return similarity_matrix\n",
    "\n",
    "def evaluate_model(similarity_matrix, true_similarity_matrix):\n",
    "    # Flatten the similarity matrices\n",
    "    similarity_values = similarity_matrix.flatten()\n",
    "    true_values = true_similarity_matrix.flatten()\n",
    "\n",
    "    # Compute Mean Squared Error (MSE)\n",
    "    mse = mean_squared_error(true_values, similarity_values)\n",
    "\n",
    "    # Compute Root Mean Squared Error (RMSE)\n",
    "    rmse = np.sqrt(mse)\n",
    "    return mse, rmse\n",
    "\n",
    "def main():\n",
    "    # Load preprocessed dataset\n",
    "    file_path = 'preprocessed_dataset.csv'\n",
    "    data = pd.read_csv(file_path)\n",
    "\n",
    "    # Define relevant columns\n",
    "    relevant_columns = ['Racial % - White', 'Racial % - Asian', 'Racial % - Hispanic', \n",
    "                        'Gender - Male', 'Gender - Female']\n",
    "\n",
    "    # Build similarity model\n",
    "    similarity_matrix = build_similarity_model(data, relevant_columns)\n",
    "\n",
    "    true_similarity_matrix = np.random.rand(*similarity_matrix.shape) \n",
    "    mse, rmse = evaluate_model(similarity_matrix, true_similarity_matrix)\n",
    "    print(\"Mean Squared Error (MSE):\", mse)\n",
    "    print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "000cc108-febd-45ab-bc77-c5700928589c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 0.25915421567005964\n",
      "Root Mean Squared Error (RMSE): 0.5090719160099677\n"
     ]
    }
   ],
   "source": [
    "# Method-4: Peason Correlation Model \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def pearson_correlation(x, y):\n",
    "    # Compute mean\n",
    "    mean_x = np.mean(x)\n",
    "    mean_y = np.mean(y)\n",
    "\n",
    "    # Compute Pearson correlation coefficient\n",
    "    numerator = np.sum((x - mean_x) * (y - mean_y))\n",
    "    denominator = np.sqrt(np.sum((x - mean_x) ** 2) * np.sum((y - mean_y) ** 2))\n",
    "    if denominator == 0:\n",
    "        return 0  # Return 0 if denominator is 0 to handle division by zero\n",
    "    else:\n",
    "        return numerator / denominator\n",
    "\n",
    "def build_similarity_model(data, relevant_columns):\n",
    "    # Remove '%' symbol and convert to float\n",
    "    data[relevant_columns] = data[relevant_columns].replace('%', '', regex=True).astype(float)\n",
    "\n",
    "    # Drop rows with NaN values\n",
    "    data.dropna(inplace=True)\n",
    "\n",
    "    # Compute Pearson correlation coefficient between all pairs of data points\n",
    "    n = len(data)\n",
    "    similarity_matrix = np.zeros((n, n))\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            similarity_matrix[i, j] = pearson_correlation(data[relevant_columns].iloc[i], data[relevant_columns].iloc[j])\n",
    "    return similarity_matrix\n",
    "\n",
    "def evaluate_model(similarity_matrix, true_similarity_matrix):\n",
    "    # Flatten the similarity matrices\n",
    "    similarity_values = similarity_matrix.flatten()\n",
    "    true_values = true_similarity_matrix.flatten()\n",
    "\n",
    "    # Compute Mean Squared Error (MSE)\n",
    "    mse = mean_squared_error(true_values, similarity_values)\n",
    "\n",
    "    # Compute Root Mean Squared Error (RMSE)\n",
    "    rmse = np.sqrt(mse)\n",
    "    return mse, rmse\n",
    "\n",
    "def main():\n",
    "    # Load preprocessed dataset\n",
    "    file_path = 'preprocessed_dataset.csv'\n",
    "    data = pd.read_csv(file_path)\n",
    "\n",
    "    # Define relevant columns\n",
    "    relevant_columns = ['Racial % - White', 'Racial % - Asian', 'Racial % - Hispanic', \n",
    "                        'Gender - Male', 'Gender - Female']\n",
    "\n",
    "    # Build similarity model\n",
    "    similarity_matrix = build_similarity_model(data, relevant_columns)\n",
    "    true_similarity_matrix = np.random.rand(*similarity_matrix.shape)  \n",
    "    mse, rmse = evaluate_model(similarity_matrix, true_similarity_matrix)\n",
    "    print(\"Mean Squared Error (MSE):\", mse)\n",
    "    print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "108b81d1-20f7-40cb-aac8-4f0282277016",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 similar schools for the reference school:\n",
      "                                    School          City  Zip Code  \\\n",
      "23               Santan Junior High School  Chandler, AZ     85249   \n",
      "134      Horizon Community Learning Center    Phoenix,AZ     85048   \n",
      "74              Stapley Junior High School      Mesa, AZ     85213   \n",
      "129  Great Hearts Academies - Veritas Prep    Phoenix,AZ     85018   \n",
      "34           Greenfield Junior High School   Gilbert, AZ     85298   \n",
      "\n",
      "    2023 Student Enrollments AZ Rank Student-Teacher Ratio  Graduation Rate%  \\\n",
      "23                      1227     125                 20:1                NaN   \n",
      "134                     400      NaN              NULL1:1                NaN   \n",
      "74                       954      74                 21:1                NaN   \n",
      "129                      300     85                NULL1:1              94.0   \n",
      "34                      1142      95                 22:1                NaN   \n",
      "\n",
      "    Dual Enrollment Offers Electives  Free Lunch (%) Mental Health Services  \\\n",
      "23              Yes             Yes              NaN                  FALSE   \n",
      "134             yes              yes             0.0                   TRUE   \n",
      "74               No               No            25.0                   TRUE   \n",
      "129              No             yes              NaN                   TRUE   \n",
      "34              Yes             Yes              NaN                  FALSE   \n",
      "\n",
      "     Racial % - White  Racial % - Asian  Racial % - Hispanic  Gender - Male  \\\n",
      "23              62.13              6.51                18.48          580.0   \n",
      "134             67.00              6.00                18.00          324.0   \n",
      "74              70.00              2.00                18.00          468.0   \n",
      "129             76.00              3.00                16.00          340.0   \n",
      "34              67.22              2.41                23.13          615.0   \n",
      "\n",
      "     Gender - Female AP Classes School Grade  \\\n",
      "23             587.0         No            B   \n",
      "134            365.0        No           NaN   \n",
      "74             482.0        Yes            B   \n",
      "129            369.0         No           A+   \n",
      "34             580.0        Yes            B   \n",
      "\n",
      "     Inexperienced Core Acadamic Teachers  \n",
      "23                                    4.0  \n",
      "134                                   4.0  \n",
      "74                                    2.0  \n",
      "129                                   6.0  \n",
      "34                                    2.0  \n"
     ]
    }
   ],
   "source": [
    "# Choosing top five colleges using a similarity matching model.\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "def preprocess_dataset(file_path):\n",
    "    # Load the dataset\n",
    "    data = pd.read_csv(file_path)\n",
    "\n",
    "    # Replace empty strings with NaN\n",
    "    data.replace('', np.nan, inplace=True)\n",
    "\n",
    "    # Define relevant columns\n",
    "    relevant_columns = ['Racial % - White', 'Racial % - Asian', 'Racial % - Hispanic', \n",
    "                        'Gender - Male', 'Gender - Female']\n",
    "\n",
    "    # Drop rows with missing values in relevant columns\n",
    "    data.dropna(subset=relevant_columns, inplace=True)\n",
    "\n",
    "    # Remove '%' symbol and convert to float\n",
    "    data[relevant_columns] = data[relevant_columns].replace('%', '', regex=True).astype(float)\n",
    "\n",
    "    return data, relevant_columns\n",
    "\n",
    "def build_similarity_model(data, relevant_columns):\n",
    "    # Normalize the selected columns\n",
    "    scaler = MinMaxScaler()\n",
    "    data_normalized = scaler.fit_transform(data[relevant_columns])\n",
    "\n",
    "    # Compute similarity between schools using cosine similarity\n",
    "    similarity_matrix = cosine_similarity(data_normalized)\n",
    "    return similarity_matrix\n",
    "\n",
    "def recommend_similar_schools(data, similarity_matrix, reference_school_index, top_n=5):\n",
    "    similarities = similarity_matrix[reference_school_index]\n",
    "    similar_school_indices = similarities.argsort()[-top_n-1:-1][::-1]  # Exclude self-similarity\n",
    "    similar_schools = data.iloc[similar_school_indices]\n",
    "    return similar_schools\n",
    "\n",
    "# Example usage:\n",
    "def main():\n",
    "    # Preprocess dataset\n",
    "    file_path = 'preprocessed_dataset.csv'\n",
    "    data, relevant_columns = preprocess_dataset(file_path)\n",
    "\n",
    "    # Build similarity model\n",
    "    similarity_matrix = build_similarity_model(data, relevant_columns)\n",
    "\n",
    "    # Example: Recommend top 5 similar schools for the first reference school\n",
    "    reference_school_index = 0  # Change this index as needed\n",
    "    top_similar_schools = recommend_similar_schools(data, similarity_matrix, reference_school_index)\n",
    "    print(\"Top 5 similar schools for the reference school:\")\n",
    "    print(top_similar_schools)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
